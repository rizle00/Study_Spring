<?xml version="1.0" encoding ="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hr">

    <select id="list" resultType="employee">
        select e.last_name || '' || e.first_name name,
               e.*,
               d.department_name,
               j.job_title
        from employees e
                 left join departments d on e.department_id = d.department_id
                 left join jobs j on e.job_id = j.job_id
        <if test="department_id >0"> where e.department_id = #{department_id}</if>
        <if test="department_id ==0"> where e.department_id is null</if>

        order by employee_id
    </select>

    <select id="info" resultType="employee">
        select e.last_name || '' || e.first_name name,
               m.last_name || '' || m.first_name manager_name,
               e.*,
               d.department_name,
               j.job_title
        from employees e
                 left join departments d on e.department_id = d.department_id
                 left join jobs j on e.job_id = j.job_id
                 left outer join  employees m on e.manager_id = m.employee_id
        where e.employee_id = #{id}
    </select>
    
    <delete id="delete">
        delete from employees where employee_id = #{id}
    </delete>

    <update id="update">
        update employees set last_name = #{last_name}, first_name=#{first_name},
        email = #{email}, phone_number = #{phone_number},
        hire_date = #{hire_date}, salary = #{salary}, job_id = #{job_id},
        <if test="department_id == -1">department_id = null</if>
        <if test="department_id != -1">department_id = #{department_id}</if>
        where employee_id = #{employee_id}
    </update>

    <select id="departmentList" resultType="departmentVO">
        select * from departments
        order by department_name
    </select>

    <select id="jobList" resultType="jobVO">
        select * from jobs
        order by job_title

    </select>

    <insert id="insert">
        insert into employees (last_name, first_name, email, phone_number,
        hire_date, salary, job_id, department_id, manager_id)
        values (#{last_name},#{first_name},#{email},
        #{phone_number},#{hire_date},#{salary},#{job_id},
        <choose>
            <when test="department_id == -1">null</when>
            <otherwise>#{department_id}</otherwise>
        </choose>
        ,
        <choose>
            <when test="manager_id == -1">null</when>
            <otherwise>#{manager_id}</otherwise>
        </choose>
        )
    </insert>

    <select id="managerList" resultType="employee">
        select employee_id, last_name||''||first_name name
        from employees
        order by name
    </select>
    
    <select id="employeeDepartment" resultType="departmentVO">
        select distinct department_id, nvl(department_name,  '소속없음') department_name
        from employees e left outer join departments d using (department_id)
        order by department_name
    </select>
</mapper>